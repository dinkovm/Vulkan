#version 460
#extension GL_EXT_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
} cam;

struct Payload
{
	vec4 albedo;
	vec3 hitPos;
	vec3 hitNormal;
	float reflectance;
	int material;
};

layout(location = 0) rayPayloadEXT Payload payload;
layout(location = 2) rayPayloadEXT bool shadowed;

struct Light {
	vec4 position;
	vec3 color;
	float radius;
};

layout (binding = 11, set = 0) uniform UBO2
{
	Light lights[6];
	vec4 viewPos;
	int displayDebugTarget;
} ubo2;

const float pi = 3.141592653589793;

// https://thebookofshaders.com/10/
float random(vec2 st) {
	return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

float random(inout uint seed0, inout uint seed1)
{
	seed0 = 36969 * ((seed0) & 65535) + ((seed0) >> 16);
	seed1 = 18000 * ((seed1) & 65535) + ((seed1) >> 16);

	float value = (uintBitsToFloat(((((seed0) << 16) + (seed1)) & 0x007fffff) | 0x40000000) - 2.0f) / 2.0f;

	return value - floor(value);
}

// http://www.rorydriscoll.com/2009/01/07/better-sampling/
vec4 sampleHemisphereCosine(float u, float v, int power)
{
  const float radius = sqrt(u);
  const float theta = 2 * pi * v;
 
  const float x = radius * cos(theta);
  const float z = radius * sin(theta);
  
  return vec4(x, sqrt(max(0.0f, 1.0f - u)), z, 0.0f);
}

mat3 generateBases(vec3 up)
{
	mat3 bases;

	bases[1] = up.xyz;
	bases[0] = abs(bases[1].x) > abs(bases[1].z) ?
		vec3(bases[1].z, 0.0f, -bases[1].x) / length(bases[1].xz) :
		vec3(0.0f, -bases[1].z, bases[1].y) / length(bases[1].yz);
	bases[2] = cross(bases[1], bases[0]);

	bases = transpose(bases);

	return bases;
}

vec3 calculateLighting(float ambient)
{
	#define lightCount 6

	vec3 color = vec3(ambient);

	for(int i = 0; i < 1/*lightCount*/; ++i)
	{
		// Vector to light
		vec3 L = ubo2.lights[i].position.xyz - payload.hitPos;
		// Distance from light to fragment position
		float dist = length(L);

		// Viewer to fragment
		vec3 V = ubo2.viewPos.xyz - payload.hitPos;
		V = normalize(V);

		//if(dist < ubo2.lights[i].radius)
		{
			// Light to fragment
			L = normalize(L);

			// Attenuation
			float atten = ubo2.lights[i].radius / (pow(dist, 2.0) + 1.0);

			// Diffuse part
			vec3 N = normalize(payload.hitNormal);
			float NdotL = max(0.0, dot(N, L));
			vec3 diff = ubo2.lights[i].color * payload.albedo.rgb * NdotL * atten;

			// Specular part
			// Specular map values are stored in alpha of albedo mrt
			vec3 R = reflect(-L, N);
			float NdotR = max(0.0, dot(R, V));
			vec3 spec = ubo2.lights[i].color * payload.albedo.a * pow(NdotR, 16.0) * atten;

			// Shadow casting
			vec3 origin = payload.hitPos + (0.0001 * payload.hitNormal);
			float tmin = 0.001;
			float tmax = length(origin - ubo2.lights[i].position.xyz);
			shadowed = true;  
			// Trace shadow ray and offset indices to match shadow hit/miss shader group indices
			traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0xFF, 1, 0, 1, origin, tmin, L, tmax, 2);
			if (!shadowed) {
				color += diff + spec;
			}
		}	
	}

	return color;
}

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 1, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	vec3 color = payload.albedo.rgb;//calculateLighting(0.2);

#if 1
	float attenuation = 1.0f;

	const uint SampleCount = 1;
	vec3 samples = vec3(0);

	Payload initPayload = payload;

	for (uint sampleIdx = 0; sampleIdx < SampleCount; sampleIdx++)
	{
		samples += color;
		payload = initPayload;

		const uint BounceCount = 1;
		for (uint bounceIdx = 0; bounceIdx < BounceCount; bounceIdx++)
		{
			float colorScalar = 1.0f;

			// Assume Lambertian material

			uint seed0 = gl_LaunchIDEXT.x * (sampleIdx + 1);
			uint seed1 = gl_LaunchIDEXT.y * (sampleIdx + 1);

			// Create a local coordinate-system at point
			mat3 localBases = generateBases(payload.hitNormal);
        
#if 0
			const float cartesianSampleU = random(gl_GlobalInvocationID.xy * (i * 0.345f) * (frameIdx * 1.238));
			const float cartesianSampleV = random(gl_GlobalInvocationID.yx * (i * 0.761f) * (frameIdx * 1.872));
#elif 1
			const float cartesianSampleU = random(seed0, seed1);
			const float cartesianSampleV = random(seed0, seed1);
#else
			const float cartesianSampleU = random(vec2(random(seed0, seed1), random(seed0, seed1)));
			const float cartesianSampleV = random(vec2(random(seed1, seed0), random(seed1, seed0)));
#endif

			// Local space
#if UNIFORM_SAMPLING
			direction = sampleHemisphereUniform(cartesianSampleU, cartesianSampleV);
#else 
			direction = sampleHemisphereCosine(cartesianSampleU, cartesianSampleV, 5);
			colorScalar = length(direction);
#endif
			direction = normalize(direction);
          
			// World space
			direction = vec4(direction.xyz * localBases, 0.0f);
			direction = normalize(direction);
        
#if UNIFORM_SAMPLING
			colorScalar = 2 * dot(payload.hitNormal, direction.xyz); // 2 * cosTheta
#endif

			origin = vec4(payload.hitPos + (0.0001 * payload.hitNormal), 1);

			attenuation *= payload.reflectance;

			traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 1, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
			samples += attenuation * /*calculateLighting(0.0f)*/payload.albedo.rgb * colorScalar;	
		}
	}

	color = min(samples / float(SampleCount), vec3(1.0f));
#endif

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
